{"version":3,"sources":["image.png","DateTime.js","FutureForecast.js","WeatherScroll.js","Search.js","App.js","index.js"],"names":["module","exports","days","months","WeatherItem","title","value","unit","View","style","styles","weatherItem","Text","weatherItemTitle","StyleSheet","create","container","flex","flexDirection","justifyContent","padding","heading","fontSize","color","fontWeight","subheading","rightAlign","textAlign","marginTop","centerAlign","alignItems","input","height","backgroundColor","timezone","latlong","weatherItemContainer","borderRadius","DateTime","current","lat","lon","useState","date","setDate","time","setTime","useEffect","setInterval","Date","month","getMonth","getDate","day","getDay","hour","getHours","hoursIn12HrFormat","minutes","getMinutes","humidity","pressure","moment","tz","sunrise","format","sunset","FutureForecastItem","forecastItem","img","uri","weather","icon","futureForecastItemContainer","dt","Image","source","image","temp","night","FutureForecast","data","length","map","idx","key","width","borderColor","borderWidth","marginLeft","marginBottom","CurrentTempEl","currentTempContainer","otherContainer","scrollView","paddingRight","WeatherScroll","weatherData","ScrollView","horizontal","marginHorizontal","maxWidth","require","App","setData","a","Location","status","fetchDataFromApi","location","coords","latitude","longitude","fetch","then","res","json","ImageBackground","daily","resizeMode","AppRegistry","registerComponent","runApplication","rootTag","document","getElementById"],"mappings":"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","file":"static/js/main.3a87a58c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.65711561.png\";","import React, { useEffect, useState } from \"react\";\nimport { View, Text, StyleSheet, TextInput } from \"react-native\";\nimport moment from \"moment-timezone\";\nimport data from \"./App\";\nconst days = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\"\n];\nconst months = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\"\n];\n\nconst WeatherItem = ({ title, value, unit }) => {\n  return (\n    <View style={styles.weatherItem}>\n      <Text style={styles.weatherItemTitle}>{title}</Text>\n      <Text style={styles.weatherItemTitle}>\n        {value}\n        {unit}\n      </Text>\n    </View>\n  );\n};\n\nconst DateTime = ({ current, lat, lon, timezone }) => {\n  const [date, setDate] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n\n  useEffect(() => {\n    setInterval(() => {\n      const time = new Date();\n      const month = time.getMonth();\n      const date = time.getDate();\n      const day = time.getDay();\n      const hour = time.getHours();\n      const hoursIn12HrFormat = hour >= 13 ? hour % 12 : hour;\n      const minutes = time.getMinutes();\n      const ampm = hour >= 12 ? \"pm\" : \"am\";\n\n      setTime(\n        (hoursIn12HrFormat < 10 ? \"0\" + hoursIn12HrFormat : hoursIn12HrFormat) +\n          \":\" +\n          (minutes < 10 ? \"0\" + minutes : minutes) +\n          ampm\n      );\n\n      setDate(days[day] + \", \" + date + \" \" + months[month]);\n    }, 1000);\n  }, []);\n  return (\n    <View style={styles.container}>\n      <View>\n        <View>\n          <Text style={styles.heading}>{time}</Text>\n        </View>\n        <View>\n          <Text style={styles.subheading}>{date}</Text>\n        </View>\n        <View style={styles.weatherItemContainer}>\n          <WeatherItem\n            title=\"Humidity\"\n            value={current ? current.humidity : \"\"}\n            unit=\"%\"\n          />\n          <WeatherItem\n            title=\"Pressure\"\n            value={current ? current.pressure : \"\"}\n            unit=\"hPA\"\n          />\n          <WeatherItem\n            title=\"Sunrise\"\n            value={\n              current\n                ? moment.tz(current.sunrise * 1000, timezone).format(\"HH:mm\")\n                : \"\"\n            }\n            unit=\"am\"\n          />\n          <WeatherItem\n            title=\"Sunset\"\n            value={\n              current\n                ? moment.tz(current.sunset * 1000, timezone).format(\"HH:mm\")\n                : \"\"\n            }\n            unit=\"pm\"\n          />\n        </View>\n      </View>\n      <View style={styles.rightAlign}>\n        <Text style={styles.timezone}>{timezone}</Text>\n        <Text style={styles.latlong}>\n          {lat}N {lon}E\n        </Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1.5,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    padding: 15\n  },\n  heading: {\n    fontSize: 45,\n    color: \"white\",\n    fontWeight: \"100\"\n  },\n  subheading: {\n    fontSize: 25,\n    color: \"#eee\",\n    fontWeight: \"300\"\n  },\n  rightAlign: {\n    textAlign: \"right\",\n    marginTop: 20\n  },\n  centerAlign: {\n    textAlign: \"center\",\n    marginTop: 20,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  input: {\n    height: 40,\n    backgroundColor: \"none\",\n    fontSize: 20,\n    marginTop: 4,\n    backgroundColor: \"black\"\n  },\n  timezone: {\n    fontSize: 20,\n    color: \"white\"\n  },\n  latlong: {\n    fontSize: 16,\n    color: \"white\",\n    fontWeight: \"700\"\n  },\n  weatherItemContainer: {\n    backgroundColor: \"#18181b99\",\n    borderRadius: 10,\n    padding: 10,\n    marginTop: 10\n  },\n  weatherItem: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  weatherItemTitle: {\n    color: \"#eee\",\n    fontSize: 14,\n    fontWeight: \"100\"\n  }\n});\n\nexport default DateTime;\n","import React from 'react'\nimport {View, Text, Image, StyleSheet} from 'react-native'\nimport moment from 'moment-timezone'\nconst FutureForecast = ({data}) => {\n    return (\n        <View style={{flexDirection: 'row'}}>\n\n            {\n                data && data.length > 0 ? \n\n                data.map((data, idx) => (\n\n                    idx !== 0 &&  <FutureForecastItem key={idx} forecastItem={data}/>\n                ))\n\n                :\n\n                <View/>\n            }\n          \n            \n\n        </View>\n    )\n}\n\nconst FutureForecastItem = ({forecastItem}) => {\n    const img = {uri: \"http://openweathermap.org/img/wn/\"+forecastItem.weather[0].icon+\"@2x.png\"}\n    return (\n        <View  style={styles.futureForecastItemContainer}>\n            <Text  style={styles.day}>{moment(forecastItem.dt * 1000).format('ddd')}</Text>\n            <Image source={img} style={styles.image} />\n            <Text  style={styles.temp}>Night - {forecastItem.temp.night}&#176;C</Text>\n            <Text  style={styles.temp}>Day - {forecastItem.temp.day}&#176;C</Text>\n\n        </View>\n    )\n}\n\nexport default FutureForecast\n\n\nconst styles = StyleSheet.create({\n    image: {\n        width: 100,\n        height:100\n    }, \n    futureForecastItemContainer: {\n        flex:1,\n        justifyContent: 'center',\n        backgroundColor: '#00000033',\n        borderRadius:10,\n        borderColor:\"#eee\",\n        borderWidth:1,\n        padding: 20,\n        marginLeft: 10\n    }, \n    day: {\n        fontSize: 20,\n        color:\"white\",\n        backgroundColor: \"#3c3c44\",\n        padding: 10,\n        textAlign:\"center\",\n        borderRadius: 50,\n        fontWeight: \"200\",\n        marginBottom: 15\n    },   \n    temp: {\n        fontSize: 14,\n        color:\"white\",\n        fontWeight:\"100\",\n        textAlign:\"center\"\n    },\n})","import React from 'react'\nimport {View, ScrollView, Image, Text, StyleSheet} from 'react-native'\nimport moment from 'moment-timezone'\nimport FutureForecast from './FutureForecast'\n\nconst WeatherScroll = ({weatherData}) => {\n    return (\n        <ScrollView horizontal={true} style={styles.scrollView}>\n            <CurrentTempEl data={weatherData && weatherData.length > 0 ? weatherData[0] : {}}/>\n            <FutureForecast data={weatherData}/>\n        </ScrollView>\n    )\n}\n\nconst CurrentTempEl = ({data}) => {\n\n    if(data && data.weather){\n        const img = {uri: 'http://openweathermap.org/img/wn/'+ data.weather[0].icon +'@4x.png'}\n        return(\n            <View style={styles.currentTempContainer}>\n                <Image source={img} style={styles.image} />\n                <View  style={styles.otherContainer}>\n                    <Text  style={styles.day}>{moment(data.dt * 1000).format('dddd')}</Text>\n                    <Text  style={styles.temp}>Night - {data.temp.night}&#176;C</Text>\n                    <Text  style={styles.temp}>Day - {data.temp.day}&#176;C</Text>\n                </View>\n            </View>\n        )\n    }else{\n        return( \n            <View>\n\n            </View>\n\n        )\n        \n    }\n   \n}\n\nconst styles = StyleSheet.create({\n    scrollView: {\n        flex:0.4,\n        backgroundColor: '#18181bcc',\n        padding:30\n    },\n    image: {\n        width: 150,\n        height: 150\n    },\n    currentTempContainer: {\n        flexDirection: 'row',\n        backgroundColor: '#00000033',\n        justifyContent:\"center\",\n        alignItems:'center',\n        borderRadius: 10,\n        borderColor:'#eee',\n        borderWidth:1,\n        padding: 15\n    },\n    day: {\n        fontSize: 20,\n        color:\"white\",\n        backgroundColor: \"#3c3c44\",\n        padding: 10,\n        textAlign:\"center\",\n        borderRadius: 50,\n        fontWeight: \"200\",\n        marginBottom: 15\n    },\n    temp: {\n        fontSize: 16,\n        color:\"white\",\n        fontWeight:\"100\",\n        textAlign:\"center\"\n    },\n    otherContainer: {\n        paddingRight: 40\n    }\n})\n\nexport default WeatherScroll\n","import React from \"react\";\nimport { Button, Image, StyleSheet, Text, View, TextInput } from \"react-native\";\nimport Geocoder from \"react-native-geocoding\";\n\nconst logoUri = `data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 841.9 595.3\"><g fill=\"#61DAFB\"><path d=\"M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z\" /><circle cx=\"420.9\" cy=\"296.5\" r=\"45.7\" /><path d=\"M520.5 78.1z\" /></g></svg>`;\n\nfunction getData() {\n  Geocoder.setApiKey(\"AIzaSyCrBGC7-guhhbCGDmE7PgXJamnTkJul38M\");\n\n  Geocoder.getFromLocation(\"text\")\n    .then((json) => {\n      var location = json.results[0].geometry.location;\n      var latitude = location.lat;\n      var longitud = location.ltg;\n    })\n    .catch((error) => console.warn(error));\n}\n\nfunction Link(props) {\n  return (\n    <Text\n      {...props}\n      accessibilityRole=\"link\"\n      style={StyleSheet.compose(styles.link, props.style)}\n    />\n  );\n}\n\nfunction SearchB() {\n  return (\n    <View style={styles.app}>\n      <View style={styles.header}>\n        <TextInput\n          style={styles.input}\n          placeholder=\"Look up another city...\"\n          onChangeText={(text) => this.getData()}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  input: {\n    backgroundColor: \"#18181bcc\",\n    borderRadius: 0\n  },\n  input: {\n    backgroundColor: \"#18181bcc\",\n    borderWidth: 1,\n    borderColor: \"#18181b33\",\n    borderRadius: 10,\n    marginTop: 1,\n    marginHorizontal: \"auto\",\n    maxWidth: 500,\n    padding: 15\n  },\n  header: {\n    padding: 20,\n    flexDirection: \"row\"\n  }\n});\n\nexport default SearchB;\n","import React, { useEffect, useState } from \"react\";\nimport { StyleSheet, View, ImageBackground } from \"react-native\";\nimport * as Location from \"expo-location\";\nimport DateTime from \"./DateTime\";\nimport WeatherScroll from \"./WeatherScroll\";\nimport SearchB from \"./Search\";\nconst API_KEY = \"49cc8c821cd2aff9af04c9f98c36eb74\";\n\nconst img = require(\"./image.png\");\nexport default function App() {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    (async () => {\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== \"granted\") {\n        fetchDataFromApi(\"40.7128\", \"-74.0060\");\n        return;\n      }\n\n      let location = await Location.getCurrentPositionAsync({});\n      fetchDataFromApi(location.coords.latitude, location.coords.longitude);\n    })();\n  }, []);\n\n  const fetchDataFromApi = (latitude, longitude) => {\n    if (latitude && longitude) {\n      fetch(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=hourly,minutely&units=metric&appid=${API_KEY}`\n      )\n        .then((res) => res.json())\n        .then((data) => {\n          // console.log(data)\n          setData(data);\n        });\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <ImageBackground source={img} style={styles.image}>\n        <View style={styles.container}>\n          <DateTime\n            current={data.current}\n            timezone={data.timezone}\n            lat={data.lat}\n            lon={data.lon}\n          />\n        </View>\n        {/*<SearchB />*/}\n        <WeatherScroll weatherData={data.daily} />\n      </ImageBackground>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  image: {\n    flex: 1,\n    resizeMode: \"cover\",\n    justifyContent: \"center\"\n  }\n});\n","import { AppRegistry } from \"react-native\";\nimport App from \"./App\";\n\nAppRegistry.registerComponent(\"App\", () => App);\n\nAppRegistry.runApplication(\"App\", {\n  rootTag: document.getElementById(\"root\")\n});\n"],"sourceRoot":""}